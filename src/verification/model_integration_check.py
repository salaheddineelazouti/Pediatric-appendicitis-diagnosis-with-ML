"""
Script de v√©rification de l'int√©gration du mod√®le SVM √† l'interface utilisateur.

Ce script v√©rifie:
1. Si le meilleur mod√®le sauvegard√© est bien un SVM
2. Si les caract√©ristiques attendues par le mod√®le correspondent aux donn√©es collect√©es via l'interface
3. Si les champs obligatoires de l'interface couvrent toutes les caract√©ristiques n√©cessaires au mod√®le
"""

import os
import sys
import pickle
import pandas as pd
import numpy as np
from sklearn.svm import SVC

# Ajouter le r√©pertoire racine au path Python
project_root = os.path.abspath(os.path.join(os.path.dirname(__file__), '../..'))
if project_root not in sys.path:
    sys.path.insert(0, project_root)

# Chemins des fichiers
model_path = os.path.join(project_root, 'models', 'best_model.pkl')
app_path = os.path.join(project_root, 'src', 'api', 'app.py')

# Charger le mod√®le
def load_model(model_path):
    """Charge le mod√®le depuis le fichier pickle"""
    try:
        with open(model_path, 'rb') as f:
            model = pickle.load(f)
        return model
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        return None

# Extraire les caract√©ristiques de l'interface depuis app.py
def extract_features_from_app(app_path):
    """Extrait les caract√©ristiques d√©finies dans l'application Flask"""
    try:
        # Cette m√©thode est un peu risqu√©e, mais c'est une fa√ßon simple pour v√©rifier
        # Id√©alement, nous aurions une fonction d'API pour r√©cup√©rer ces informations
        
        features = []
        with open(app_path, 'r') as f:
            content = f.read()
        
        # Extraire les d√©finitions des caract√©ristiques
        feature_sections = [
            "DEMOGRAPHIC_FEATURES", "CLINICAL_FEATURES", 
            "LABORATORY_FEATURES", "SCORING_FEATURES"
        ]
        
        for section in feature_sections:
            # Trouver la section correspondante
            section_start = content.find(f"{section} = [")
            if section_start == -1:
                continue
            
            section_end = content.find("]", section_start)
            section_content = content[section_start:section_end]
            
            # Extraire les noms des caract√©ristiques
            feature_entries = section_content.split('{"name": "')
            for entry in feature_entries[1:]:  # Ignorer le premier √©l√©ment
                feature_name = entry.split('"')[0]
                features.append(feature_name)
        
        return features
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction des caract√©ristiques depuis app.py: {e}")
        return []

# Extraire les caract√©ristiques requises √† partir des donn√©es dans app.py
def extract_required_features_from_app(app_path):
    """Extrait les caract√©ristiques requises d√©finies dans l'application Flask"""
    try:
        required_features = []
        with open(app_path, 'r') as f:
            for line in f:
                if 'required_features' in line and '=' in line:
                    # Extraire la liste des caract√©ristiques requises
                    features_str = line.split('=')[1].strip()
                    if features_str.startswith('['):
                        features_str = features_str.strip('[]')
                        features = [f.strip().strip("'\"") for f in features_str.split(',')]
                        required_features.extend(features)
        return required_features
    except Exception as e:
        print(f"‚ùå Erreur lors de l'extraction des caract√©ristiques requises: {e}")
        return []

def analyze_model_features(model, ui_features, required_ui_features):
    """Analyse la correspondance entre les caract√©ristiques du mod√®le et celles de l'interface"""
    if not hasattr(model, 'feature_names_in_'):
        print("‚ùå Le mod√®le n'a pas d'attribut 'feature_names_in_'.")
        return False

    model_features = model.feature_names_in_
    print(f"\nüìä Caract√©ristiques du mod√®le: {len(model_features)}")
    print(model_features)
    
    print(f"\nüìã Caract√©ristiques de l'interface: {len(ui_features)}")
    print(ui_features)
    
    print(f"\nüîç Caract√©ristiques requises dans l'interface: {len(required_ui_features)}")
    print(required_ui_features)
    
    # V√©rifier si toutes les caract√©ristiques du mod√®le sont couvertes par l'interface
    missing_in_ui = [f for f in model_features if f not in ui_features]
    if missing_in_ui:
        print(f"\n‚ùå Caract√©ristiques du mod√®le manquantes dans l'interface: {missing_in_ui}")
        return False
    
    # V√©rifier si toutes les caract√©ristiques requises par le mod√®le sont requises dans l'interface
    not_required_but_needed = [f for f in model_features if f not in required_ui_features]
    if not_required_but_needed:
        print(f"\n‚ö†Ô∏è Caract√©ristiques n√©cessaires au mod√®le mais non requises dans l'interface: {not_required_but_needed}")
    
    return True

def verify_model_type(model, expected_type=SVC):
    """V√©rifie si le mod√®le est du type attendu"""
    if isinstance(model, expected_type):
        print(f"‚úÖ Le mod√®le est bien du type attendu: {expected_type.__name__}")
        return True
    else:
        print(f"‚ùå Le mod√®le n'est pas du type attendu: {type(model).__name__} au lieu de {expected_type.__name__}")
        return False

def update_model_if_needed(model_path):
    """Met √† jour le mod√®le SVM depuis le script d'√©valuation si n√©cessaire"""
    try:
        # V√©rifier si le mod√®le SVM existe dans le dossier reports
        reports_dir = os.path.join(project_root, 'reports')
        model_selection_path = os.path.join(reports_dir, 'model_selection_reasoning.txt')
        
        if os.path.exists(model_selection_path):
            print(f"\nüìÑ Fichier de raisonnement de s√©lection de mod√®le trouv√©: {model_selection_path}")
            
            # Lire le fichier pour confirmer que SVM est recommand√©
            with open(model_selection_path, 'r') as f:
                content = f.read()
                
            if 'MOD√àLE S√âLECTIONN√â: SVM' in content or 'Meilleur mod√®le recommand√©: SVM' in content:
                print("‚úÖ Le mod√®le SVM est bien recommand√© selon l'√©valuation.")
                
                # Importer les modules n√©cessaires pour l'entra√Ænement du SVM
                from sklearn.model_selection import train_test_split
                from sklearn.svm import SVC
                
                # Charger les donn√©es ou g√©n√©rer des donn√©es synth√©tiques
                try:
                    from src.visualization.compare_models import load_data
                    X, y = load_data()
                    
                    # Diviser les donn√©es
                    X_train, X_test, y_train, y_test = train_test_split(
                        X, y, test_size=0.2, random_state=42, stratify=y
                    )
                    
                    # Cr√©er et entra√Æner le mod√®le SVM
                    svm_model = SVC(
                        kernel='rbf', C=1, gamma='scale', probability=True, random_state=42
                    )
                    svm_model.fit(X_train, y_train)
                    
                    # Sauvegarder le mod√®le
                    with open(model_path, 'wb') as f:
                        pickle.dump(svm_model, f)
                    
                    print(f"‚úÖ Mod√®le SVM mis √† jour et sauvegard√© dans {model_path}")
                    return svm_model
                except Exception as e:
                    print(f"‚ùå Erreur lors de la mise √† jour du mod√®le SVM: {e}")
        
        return None
    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification du mod√®le SVM: {e}")
        return None

def main():
    """Fonction principale"""
    print("\n" + "="*70)
    print("V√âRIFICATION DE L'INT√âGRATION DU MOD√àLE √Ä L'INTERFACE UTILISATEUR")
    print("="*70)
    
    # 1. Charger le mod√®le actuel
    model = load_model(model_path)
    if model is None:
        print("‚ùå Le mod√®le n'a pas pu √™tre charg√©. Tentative de mise √† jour du mod√®le...")
        model = update_model_if_needed(model_path)
        if model is None:
            print("‚ùå Impossible de mettre √† jour le mod√®le. V√©rification impossible.")
            return
    
    # 2. V√©rifier le type du mod√®le
    is_svm = verify_model_type(model, SVC)
    
    # 3. Si ce n'est pas un SVM, mise √† jour n√©cessaire
    if not is_svm:
        print("\nüîÑ Le mod√®le actuel n'est pas un SVM. Tentative de mise √† jour...")
        model = update_model_if_needed(model_path)
        if model is None:
            print("‚ùå Impossible de mettre √† jour le mod√®le vers SVM. V√©rification termin√©e.")
            return
    
    # 4. Extraire les caract√©ristiques de l'interface
    ui_features = extract_features_from_app(app_path)
    required_ui_features = extract_required_features_from_app(app_path)
    
    # 5. V√©rifier la correspondance entre les caract√©ristiques
    features_match = analyze_model_features(model, ui_features, required_ui_features)
    
    # 6. Conclusion
    print("\n" + "="*70)
    if is_svm and features_match:
        print("‚úÖ V√âRIFICATION R√âUSSIE: Le mod√®le SVM est correctement int√©gr√© √† l'interface.")
    else:
        print("‚ö†Ô∏è V√âRIFICATION INCOMPL√àTE: Des probl√®mes ont √©t√© d√©tect√©s dans l'int√©gration.")
    
    print("\nRecommandations:")
    if not is_svm:
        print("- Mettre √† jour le fichier 'best_model.pkl' avec le mod√®le SVM recommand√©")
    
    if not features_match:
        print("- Assurer la correspondance entre les caract√©ristiques du mod√®le et de l'interface")
        print("- Mettre √† jour la liste des caract√©ristiques requises dans l'application")

if __name__ == "__main__":
    main()
